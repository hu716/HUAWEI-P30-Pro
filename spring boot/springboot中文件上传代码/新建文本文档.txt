@RequestMapping("/register")
	public String  register(
			HttpServletRequest request,
			@ModelAttribute User user,
			Model model
			) throws IOException {
		System.out.println("username"+user.getUsername());
		if (!user.getHeadPortrait().isEmpty()){
			//上传文件路径
			String path=request.getServletContext().getRealPath("/upload/");
			System.out.println(path);
			String fileName=user.getHeadPortrait().getOriginalFilename();
			File filePath=new File(path,fileName);
			System.out.println(filePath);
			//判断路径是否存在，不存在就创建一个
			if (!filePath.getParentFile().exists()){
				filePath.getParentFile().mkdirs();
			}
			//将上传文件保存到一个目标文件夹中
			user.getHeadPortrait()
					.transferTo(new File(path+File.separator+fileName));
			model.addAttribute("user",user);
			return "userInfo";
		}else {
			return "error";
		}
	}
	@RequestMapping("/download")
	public ResponseEntity<byte[]> download(
			HttpServletRequest request,
			@RequestParam("filename") String filename,
			@RequestHeader("User-Agent") String userAgent,
			Model model
	) throws IOException {
		//下载文件路径
		String path=request.getServletContext().getRealPath("/upload/");
		//构建file
		File file=new File(path+File.separator+filename);
		//OK表示http中的状态200
		ResponseEntity.BodyBuilder builder=ResponseEntity.ok();
		  //内容长度
		builder.contentLength(file.length());
		  //application/octet-stream,二进制流数据
		 builder.contentType(MediaType.APPLICATION_OCTET_STREAM);
		 //使用URLEncoding对文件进行解码
		 filename= URLEncoder.encode(filename,"UTF-8");
		 if (userAgent.indexOf("MSIE")>0){
		 	builder.header("Content-Disposition","attachment;filename="+filename);
		 }else {
		 	builder.header("Content-Disposition","attachment;filename*=UTF-8''"+filename);
		 }
		 return builder.body(FileUtils.readFileToByteArray(file));
	}